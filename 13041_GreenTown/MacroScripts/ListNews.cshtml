@inherits umbraco.MacroEngines.DynamicNodeContext

@{
	var pagesToList = Model.Children.Where("Visible");
			
	var itemsPerPage = String.IsNullOrEmpty(Parameter.noPerPage) ? 5 : int.Parse(Parameter.noPerPage);
	
	
		
	var numberOfItems = pagesToList.Count();
    int currentPage = 1;

    if (!int.TryParse(HttpContext.Current.Request.QueryString["Page"], out currentPage))
    {
        currentPage = 1;
    }

    currentPage--;
	
	var numberOfPages = Math.Ceiling((decimal)numberOfItems / (decimal)itemsPerPage);
}	
	
@foreach (var itemGroup in pagesToList.Skip(currentPage*itemsPerPage).OrderBy("newsDate desc, CreateDate desc").Take(itemsPerPage).InGroupsOf(5)){
    <div id="newsList">
        <div class="newsItems">
           @foreach (var newsItem in itemGroup)
            {
                var newsCopy = newsItem.Summary;
                newsCopy = Library.StripHtml(newsCopy);
                newsCopy = Library.Truncate(newsCopy, 250, true);
				
				
            
                <article class="item">
					@{var selectedMedia3 = Library.MediaById(newsItem.newsImage);	}							
					@if (selectedMedia3 != null){
						
					<div class="newsImage">
      					<a href="@newsItem.Url"><img src="/imagegen.ashx?image=@selectedMedia3.umbracoFile&Crop=resize&width=320&height=320&align=center&valign=center" alt="@selectedMedia3.Name"/></a>                       
					</div>						
					}					
					
					<div class="NewsContent">
                    	<span class="itemSource">@newsItem.newsSource, </span> <span class="itemDate">@newsItem.newsDate.ToString("dd MMMM yyyy")</span>
						<br/>
						<h3><a href="@newsItem.Url">@newsItem.Name</a></h3>
                    	<p>@newsCopy</p>
							<a href="@newsItem.Url" class="readMore">@umbraco.library.GetDictionaryItem("ReadMore")</a>
					</div>
                </article>  
				<div class="clear"></div>
            }
        </div>
    </div>
}
@*
<ul id="paging" class="group">
    @{
        <li>
            @if (currentPage > 0)
            {
                <a href="?page=@(currentPage)">&laquo; Previous</a>
            }
            else
            {
                <span class="pagingDisabled">&laquo; Previous</span>
            }
        </li>

        
        //Create a variable 'pages' that stores from 1 to the numberOfPages variable
        var pages = Enumerable.Range(1, (int)numberOfPages);
        
        //Loop through the numbers in the Pages variable
        foreach (var number in pages)
        {
            <li>
                @if (number - 1 != currentPage){<a href="?page=@number">@number</a>}
				else{<span>@number</span>}
            </li>
        }

        //NEXT Link
        <li>
            @if (currentPage < pages.Count() - 1)
            {
                <a href="?page=@(currentPage + 2)">Next &raquo;</a>
            }
            else
            {
                <span class="pagingDisabled">Next &raquo;</span>
            }
        </li>
    }
</ul>*@